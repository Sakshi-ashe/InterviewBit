NAIVE SOLUTION O(N^2)
----------------------

public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int x = 0, y = B;
        int max_sum = Integer.MIN_VALUE;
        int size = A.size();
        
        if(B > size){
            return -1;
        }
        
        while(y >= 0){
            int sum = 0;
            for(int i=0; i<x; i++){
                sum += A.get(i);
            }
            //B=2 , A.sixe=7
            //0 1 2 3 4 5 6
            for(int j=size-1; j>=size-y; j--){
                sum += A.get(j);
            }
            
            if(sum > max_sum){max_sum = sum;}
            x++;
            y--;
        }
        
        return max_sum;
        
    }
}



EFFICIENT SOLUTION (with prefix and suffix) T.C. O(N) S.C. O(N)
--------------------
public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int size = A.size();

        int[] prefix= new int[size];
        int[] suffix= new int[size];
        
        prefix[0] = A.get(0);
        suffix[size-1] = A.get(size-1);
        
        for(int i=1; i<size; i++){
            prefix[i] = prefix[i-1] + A.get(i);
        }
        
        for(int j=size-2; j>=0; j--){
            suffix[j] = suffix[j+1] + A.get(j);
        }
        
        int a = B;  //left = a elements, right = B-a elements
        int max_sum = Integer.MIN_VALUE;
        
        while( a >= 0){
            int sum = 0;
            if(a == B) sum = prefix[a-1];
            else if(a == 0) sum = suffix[size - (B-a)];
            else sum = prefix[a-1] + suffix[size - (B-a)];
            if(sum > max_sum) max_sum = sum;
            a--;
        }

        return max_sum;   
    }
    
   }
    
    
    
    SCALER SOLUTION (S.C. O(1)) Removed prefix. suffix array
    -------------------------------
    public class Solution {
    public int solve(ArrayList<Integer> A, int B) {
        int size = A.size();
        int maxSum = 0;
        for(int i=0; i<B; i++) {
            maxSum += A.get(i);
        }
        if(B == size) {
            return maxSum;
        }
        
        int localSum = maxSum;
        int startPointer = B - 1;   
        int endPointer = size - 1;  
        
        for(int i=startPointer; i>=0; i--) {
            localSum -= A.get(i);
            localSum += A.get(endPointer);
            
            maxSum = Math.max(localSum, maxSum);
            endPointer--;
        }
        
        
        return maxSum;
    }
}


