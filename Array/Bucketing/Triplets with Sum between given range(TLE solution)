import java.lang.*;


public class Solution 
{
// Function to find count of
// triplets having sum less
// than or equal to val.
public int countTripletsLessThan(double []arr,
										int n, int val)
{
	// sort the input array.
	Arrays.sort(arr);

	// Initialize result
	int ans = 0;

	int j, k;

	// to store sum
	double sum;

	// Fix the first element
	for (int i = 0; i < n - 2; i++)
	{

		// Initialize other two elements
		// as corner elements of subarray
		// arr[j+1..k]
		j = i + 1;
		k = n - 1;

		// Use Meet in the
		// Middle concept.
		while (j != k)
		{
			sum = arr[i] + arr[j] + arr[k];

			// If sum of current triplet
			// is greater, then to reduce it
			// decrease k.
			if (sum > val)
				k--;

			// If sum is less than or
			// equal to given value,
			// then add possible
			// triplets (k-j) to result.
			else
			{
				ans += (k - j);
                //System.out.println(arr[i] + " " + arr[j] + " " + arr[k]);
				j++;
			}
		}
	}

	return ans;
}

	// Function to return count
	// of triplets having sum
	// in range [a, b].
	public int countTriplets(double arr[], int n,
									int a, int b)
	{
	
		// to store count
		// of triplets.
		int res;
	
		// Find count of triplets
		// having sum less than or
		// equal to b and subtract
		// count of triplets having
		// sum less than or equal
		// to a-1.
		res = countTripletsLessThan(arr, n, b) -
			countTripletsLessThan(arr, n, a);
	
		return res;
	}

    public int solve(ArrayList<String> A) 
    {
        int n = A.size();
        double[] arr = new double[n];
        for (int i=0; i < n; i++)
        {
            arr[i] = Double.parseDouble(A.get(i));
        }

        //A.toArray(arr);
        int a = 1, b = 2;
        return countTriplets(arr, n, a, b) >= 1 ? 1 : 0;
    }

}


