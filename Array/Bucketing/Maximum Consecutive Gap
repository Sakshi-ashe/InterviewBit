public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int maximumGap(final int[] arr) {
        
         int n = arr.length;
        if(n<=1){
            return 0;    
        }
        if(n == 2){
            return Math.abs(arr[1] - arr[0]);
        }
        else{
            // Find maximum and minimum in arr[]  
            int maxVal = arr[0]; 
            int minVal = arr[0]; 
            for (int i = 1; i < n; i++) { 
                maxVal = Math.max(maxVal, arr[i]); 
                minVal = Math.min(minVal, arr[i]); 
            } 
    
            //Arrays to store maximum and minimum values  
            //in n-1 buckets of differences.  
            int maxBucket[] = new int[n]; 
            int minBucket[] = new int[n]; 
            Arrays.fill(maxBucket, 0, n - 1, Integer.MIN_VALUE); 
            Arrays.fill(minBucket, 0, n - 1, Integer.MAX_VALUE); 
    
            // Expected gap for every bucket.  
            float delta = (float) (maxVal - minVal) / (float) (n - 1); 
    
            // Traversing through array elements and  
            // filling in appropriate bucket if bucket  
            // is empty. Else updating bucket values.  
            for (int i = 0; i < n; i++) { 
                if (arr[i] == maxVal || arr[i] == minVal) { 
                    continue; 
                } 
    
                // Finding index of bucket.  
                int index = (int) (Math.round((arr[i] - minVal) / delta)); 
    
                // Filling/Updating maximum value of bucket  
                if (maxBucket[index] == Integer.MIN_VALUE) { 
                    maxBucket[index] = arr[i]; 
                } else { 
                    maxBucket[index] = Math.max(maxBucket[index], arr[i]); 
                } 
    
                // Filling/Updating minimum value of bucket  
                if (minBucket[index] == Integer.MAX_VALUE) { 
                    minBucket[index] = arr[i]; 
                } else { 
                    minBucket[index] = Math.min(minBucket[index], arr[i]); 
                } 
            } 
    
            // Finding maximum difference between maximum value  
            // of previous bucket minus minimum of current bucket.  
            int prev_val = minVal; 
            int max_gap = 0; 
            for (int i = 0; i < n - 1; i++) { 
                if (minBucket[i] == Integer.MAX_VALUE) { 
                    continue; 
                } 
                max_gap = Math.max(max_gap, minBucket[i] - prev_val); 
                prev_val = maxBucket[i]; 
            } 
            max_gap = Math.max(max_gap, maxVal - prev_val); 
    
            return max_gap; 
        }//else close
    }
}
