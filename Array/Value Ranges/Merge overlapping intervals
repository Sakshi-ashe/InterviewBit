/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        
        
        int l = intervals.size();
        
        if(l <= 1){
            return intervals;
        }
        
        Stack<Interval> s = new Stack();
        
        Collections.sort(intervals, new IntervalComparator());
        
        s.push(intervals.get(0));
        
        for(int i=0;i<l;i++){
            
            Interval top = s.peek();
            
            if(top.end<intervals.get(i).start){
                s.push(intervals.get(i));
            }
            
            else if(top.end<intervals.get(i).end){
                top.end = intervals.get(i).end;
                s.pop();
                s.push(top);
            }
        }
        
        ArrayList<Interval> list = new ArrayList(s);
        return list;

       
    }
}
