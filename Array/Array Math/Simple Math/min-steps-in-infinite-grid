EFFICIENT O(n) MY SOLUTIION 
-------------------------------------------------------

public class Solution {
    public int coverPoints(ArrayList<Integer> A, ArrayList<Integer> B) {
        
        int sizeA  = A.size();
        int sizeB = B.size();
        
        if(sizeA != sizeB){ return -1;}
        
        else{
            
            int steps = 0;
            
            for(int i=1; i<sizeA; i++){
                int diffx = Math.abs(A.get(i) - A.get(i-1));
                int diffy = Math.abs(B.get(i) - B.get(i-1));
       
                steps +=  Math.max(diffx, diffy);
            }
            
            return steps;
        }
    }
}




LEETCODE SOLUTION 
---------------------------
public class Solution {
    // X and Y co-ordinates of the points in order.
    // Each point is represented by (X.get(i), Y.get(i))
    public int coverPoints(ArrayList<Integer> X, ArrayList<Integer> Y) {
        int numSteps = 0;
        for(int i = 1; i < X.size(); i++){
            numSteps += Math.max( Math.abs(X.get(i) - X.get(i-1)), Math.abs(Y.get(i) - Y.get(i-1)) ); 
        }
        return numSteps;
    }
}



LEARNINGS
-----------------------------------
1. CONVERT NEGATIVE NUMBER TO POSITIVE IN JAVA

Math.abs(-1);
----------------------------------
2. MAX OF TWO NUMBERS

max = diffx > diffy ? diffx : diffy; WRONG
max = Math.max(diffx, diffy);
--------------------------------
3. MIN_VALUE

WRONG Integer.MIN_VALUE();
CORRECT Integer.MIN_VALUE;

-------------------------------
4. TRY TO MINIMIZE VARIABLES AS LESS AS POSSIBLE

 LEETCODE:      numSteps += Math.max( Math.abs(X.get(i) - X.get(i-1)), Math.abs(Y.get(i) - Y.get(i-1)) ); 
 
 MY CODE:       int diffx = Math.abs(A.get(i) - A.get(i-1));
                int diffy = Math.abs(B.get(i) - B.get(i-1));
       
                steps +=  Math.max(diffx, diffy);
            


