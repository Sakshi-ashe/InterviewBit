public class Solution {
    public int perfectPeak(int[] A) {
        
        int[] prefix_holding_max_till_now = new int[A.length];
        int[] suffix_holding_min_till_now = new int[A.length];
        
        prefix_holding_max_till_now[0] = Integer.MIN_VALUE;
        suffix_holding_min_till_now[A.length -1] = Integer.MAX_VALUE;
        
        for(int i=1; i<A.length; i++){
            prefix_holding_max_till_now[i] = Math.max(A[i-1], prefix_holding_max_till_now[i-1]);
        }
        
        for(int j=A.length-2; j>=0; j--){
            suffix_holding_min_till_now[j] = Math.min(A[j+1], suffix_holding_min_till_now[j+1]);
            
        }
        
        //NOTE: Do not consider the corner elements i.e A[0] and A[N-1] as the answer.
        for(int i=1; i<=A.length-2; i++){
            if(prefix_holding_max_till_now[i] < A[i] &&
                suffix_holding_min_till_now[i] > A[i] ){
                    //System.out.println(A[i]);
                    return 1;
                }
                
        }
        
        return 0;

    }
}
