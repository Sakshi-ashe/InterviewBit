public class Solution {
    public String solve(String A) {
        
    int[] arr = new int[A.length()];

    // parsing the String argument as a signed decimal
    // integer object and storing that integer into the
    // array
    for (int i = 0; i < A.length(); i++) {
        arr[i] = Character.getNumericValue(A.charAt(i));
    }

        
    // next permutation
        
    int n = arr.length, i, j;

    // Find for the pivot element.
    // A pivot is the first element from
    // end of sequencewhich doesn't follow
    // property of non-increasing suffix
    for (i = n - 2; i >= 0; i--) {
      if (arr[i] < arr[i + 1]) {
        break;
      }
    }

    // Check if pivot is not found
    if (i < 0) {
        return String.valueOf(-1);
    }

    // if pivot is found
    else {

      // Find for the successor of pivot in suffix
      for (j = n - 1; j > i; j--) {
        if (arr[j] > arr[i]) {
          break;
        }
      }

      // Swap the pivot and successor
      swap(arr, i, j);

      // Minimise the suffix part
      reverse(arr, i + 1, arr.length - 1);
      
    }
    
    StringBuilder sb = new StringBuilder();
    
    for(int h=0; h<arr.length; h++){
        sb.append(arr[h]);
    }
    
    return sb.toString();

  }

  static void reverse(int[] arr, int start, int end)
  {
    while (start < end) {
      swap(arr, start, end);
      start++;
      end--;
    }
    
  }
  
  
  static void swap(int[] arr, int i, int j)
  {
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
  

}
